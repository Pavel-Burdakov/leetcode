/**
 * Definition for singly-linked list.
 * class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */

// Медленный указатель перемещается на один шаг за раз,
// а быстрый указатель перемещается на два шага за раз.
// Если есть цикл, быстрый указатель в конечном итоге встретит
// медленный указатель внутри цикла. Если цикла нет ,
// быстрый указатель достигнет конца списка.
// Алгоритм поиска цикла Флойда
// быстрый медленный подход // 2 указателя // «алгоритм черепахи и зайца»

// Временная сложность
//1. Цикл: В худшем случае, если в списке нет цикла, указатель fast будет двигаться в два раза быстрее, чем указатель slow. Это означает, что fast пройдет весь список, пока slow пройдет половину его длины.
//2. Количество итераций: В каждом шаге цикла while указатели slow и fast перемещаются на 1 и 2 узла соответственно. Таким образом, если в списке n узлов, то максимальное количество итераций будет равно n/2, что по большому счету дает временную сложность O(n).
//Таким образом, временная сложность алгоритма составляет O(n).
//Пространственная сложность
//Алгоритм использует только два указателя (slow и fast) и не требует дополнительной памяти для хранения данных, зависящих от размера входных данных. Следовательно, пространственная сложность составляет O(1).
//Итог
//Временная сложность: O(n)
//Пространственная сложность: O(1)


public class Solution {
    public boolean hasCycle(ListNode head) {
        ListNode fast=head;
        ListNode slow=head;
        while(fast!=null && fast.next!=null)
        {
            slow = slow.next;
            fast = fast.next.next;
            if(fast == slow)
            {
                return true;
            }
        }
        return false;        
    }
}